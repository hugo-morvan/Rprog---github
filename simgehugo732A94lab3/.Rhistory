mcmc_counter_factory  <- function(){
#Optional
}
mark_my_assignment()
mark_my_assignment("repeat_my_moving_median")
mark_my_assignment("repeat_my_moving_median")
repeat_my_moving_median(x=1:10,2)
#1.4.2 ---------------xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
repeat_my_moving_median <- function(x, n, ...){
stopifnot(is.numeric(x) && is.numeric(n))
answer <- c()
i <- 1
repeat{
med <- median(x = x[i:(i+n)], ...)
answer[i] <- med
i = i + 1
if( i >= length(x)-n+1 ) {
break
}
}
print(answer)
return(answer)
}
repeat_my_moving_median(x=1:10,2)
#1.4.2 ---------------xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
repeat_my_moving_median <- function(x, n, ...){
stopifnot(is.numeric(x) && is.numeric(n))
answer <- c()
i <- 1
repeat{
med <- median(x = x[i:(i+n)], ...)
answer[i] <- med
i = i + 1
if( i >= length(x)-n+1 ) {
break
}
}
return(answer)
}
mark_my_assignment("repeat_my_moving_median")
mark_my_assignment()
mark_my_assignment("trial_division_factorization")
tasks()
tasks
trial_division_factorization(x = 47 * 91 * 97)
#1.3.3 ---------------
trial_division_factorization <- function(x){
#Optional
stopifnot(is.numeric(x))
a <- c()
f <- 2
while (x > 1){
if (n %% f == 0){
append(a,f)
n = n%/%f
}
else{
f = f + 1
}
}
return(a)
}
trial_division_factorization(x = 47 * 91 * 97)
#1.3.3 ---------------
trial_division_factorization <- function(x){
#Optional
stopifnot(is.numeric(x))
a <- c()
f <- 2
while (x > 1){
if (x %% f == 0){
append(a,f)
x = x%/%f
}
else{
f = f + 1
}
}
return(a)
}
trial_division_factorization(x = 47 * 91 * 97)
#1.3.3 ---------------
trial_division_factorization <- function(x){
#Optional
stopifnot(is.numeric(x))
a <- c()
f <- 2
i=1
while (x > 1){
if (x %% f == 0){
a[i] <- f
i = i+1
x = x%/%f
}
else{
f = f + 1
}
}
return(a)
}
trial_division_factorization(x = 47 * 91 * 97)
trial_division_factorization(x = 2^3 * 13 * 17 * 31)
#' Dijkstra's Algorithm
#'
#' @param graph a data frame with columns v1 (from), v2 (to), w (weight)
#' @param init.node the starting node
#' @return the shortest path from init.node to all other nodes
#' @export
#' @examples
#' wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
#'                        v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
#'                       w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
#' dijkstra(wiki_graph, 1)
dijkstra <- function(graph, init.node) {
#pseudo code (source = https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm)
dist <- c()
prev <- c()
my_queue <- c()
#initialize dist and prev
for (i in 1:nrow(graph)){
dist[i] <- Inf
prev[i] <- NA
my_queue[i] <- i
}
#Set the distance to zero for the initial node
dist[init.node] <- 0
#Set the current node to the initial node
current <- init.node
while(length(my_queue) > 0){
#find the node in the queue with the smallest dist
min.dist <- Inf
for (i in 1:length(my_queue)){
if (dist[my_queue[i]] < min.dist){
min.dist <- dist[my_queue[i]]
current <- my_queue[i]
}
}
#remove current from Q
my_queue <- my_queue[my_queue != current]
#for each neighbor of current
for (i in 1:nrow(graph)){
if (graph[i, 1] == current){
neighbor <- graph[i, 2]
alt <- dist[current] + graph[i, 3]
if (alt < dist[neighbor]){
dist[neighbor] <- alt
prev[neighbor] <- current
}
}
}
}
return(list(dist = dist, prev = prev))
}
wiki_graph <-
data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
#' Dijkstra's Algorithm
#'
#' @param graph a data frame with columns v1 (from), v2 (to), w (weight)
#' @param init.node the starting node
#' @return the shortest path from init.node to all other nodes
#' @export
#' @examples
#' wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
#'                        v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
#'                       w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
#' dijkstra(wiki_graph, 1)
dijkstra <- function(graph, init.node) {
#pseudo code (source = https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm)
#Checking input
if (nrow(graph) == 0){
stop("The graph is empty")
}
if (init.node > nrow(graph)){
stop("The initial node is not in the graph")
}
dist <- c()
prev <- c()
my_queue <- c()
#initialize dist and prev
for (i in 1:nrow(graph)){
dist[i] <- Inf
prev[i] <- NA
my_queue[i] <- i
}
#Set the distance to zero for the initial node
dist[init.node] <- 0
#Set the current node to the initial node
current <- init.node
while(length(my_queue) > 0){
#find the node in the queue with the smallest dist
min.dist <- Inf
for (i in 1:length(my_queue)){
if (dist[my_queue[i]] < min.dist){
min.dist <- dist[my_queue[i]]
current <- my_queue[i]
}
}
#remove current from Q
my_queue <- my_queue[my_queue != current]
#for each neighbor of current
for (i in 1:nrow(graph)){
if (graph[i, 1] == current){
neighbor <- graph[i, 2]
alt <- dist[current] + graph[i, 3]
if (alt < dist[neighbor]){
dist[neighbor] <- alt
prev[neighbor] <- current
}
}
}
}
#dist is a vector of the shortest distance from the initial node to each node
#ie dist[i] is the shortest distance from the initial node to node i
return(list(dist = dist))
}
wiki_graph <-
data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
#' Dijkstra's Algorithm
#'
#' @param graph a data frame with columns v1 (from), v2 (to), w (weight)
#' @param init.node the starting node
#' @return the shortest path from init.node to all other nodes
#' @export
#' @examples
#' wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
#'                        v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
#'                       w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
#' dijkstra(wiki_graph, 1)
dijkstra <- function(graph, init.node) {
#pseudo code (source = https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm)
#Checking input
if (nrow(graph) == 0) {
stop("The graph is empty")
}
if (init.node > nrow(graph)){
stop("The initial node is not in the graph")
}
dist <- c()
prev <- c()
my_queue <- c()
#initialize dist and prev
for (i in 1:nrow(graph)){
dist[i] <- Inf
prev[i] <- NA
my_queue[i] <- i
}
#Set the distance to zero for the initial node
dist[init.node] <- 0
#Set the current node to the initial node
current <- init.node
while(length(my_queue) > 0) {
#find the node in the queue with the smallest dist
min_dist <- Inf
for (i in 1:length(my_queue)){
if (dist[my_queue[i]] < min_dist) {
min_dist <- dist[my_queue[i]]
current <- my_queue[i]
}
}
#remove current from Q
my_queue <- my_queue[my_queue != current]
#for each neighbor of current
for (i in 1:nrow(graph)) {
if (graph[i, 1] == current) {
neighbor <- graph[i, 2]
alt <- dist[current] + graph[i, 3]
if (alt < dist[neighbor]) {
dist[neighbor] <- alt
prev[neighbor] <- current
}
}
}
}
#dist is a vector of the shortest distance from the init node to each node
#ie dist[i] is the shortest distance from the initial node to node i
return(list(dist = dist))
}
wiki_graph <-
data.frame(v1 = c(1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6),
v2 = c(2, 3, 6, 1, 3, 4, 1, 2, 4, 6, 2, 3, 5, 4, 6, 1, 3, 5),
w = c(7, 9, 14, 7, 10, 15, 9, 10, 11, 2, 15, 11, 6, 6, 9, 14, 2, 9))
print(dijkstra(wiki_graph, 1))
#' Dijkstra's Algorithm
#'
#' @param graph a data frame with columns v1 (from), v2 (to), w (weight)
#' @param init.node the starting node
#' @return the shortest path from init.node to all other nodes
#' @export
#' @examples
#' wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
#'                        v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
#'                       w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
#' dijkstra(wiki_graph, 1)
dijkstra <- function(graph, init.node) {
#pseudo code (source = https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm)
#Checking input
if (nrow(graph) == 0) {
stop("The graph is empty")
}
if (init.node > nrow(graph)){
stop("The initial node is not in the graph")
}
dist <- c()
prev <- c()
my_queue <- c()
#initialize dist and prev
for (i in 1:nrow(graph)){
dist[i] <- Inf
prev[i] <- NA
my_queue[i] <- i
}
#Set the distance to zero for the initial node
dist[init.node] <- 0
#Set the current node to the initial node
current <- init.node
while(length(my_queue) > 0) {
#find the node in the queue with the smallest dist
min_dist <- Inf
for (i in 1:length(my_queue)){
if (dist[my_queue[i]] < min_dist) {
min_dist <- dist[my_queue[i]]
current <- my_queue[i]
}
}
#remove current from Q
my_queue <- my_queue[my_queue != current]
#for each neighbor of current
for (i in 1:nrow(graph)) {
if (graph[i, 1] == current) {
neighbor <- graph[i, 2]
alt <- dist[current] + graph[i, 3]
if (alt < dist[neighbor]) {
dist[neighbor] <- alt
prev[neighbor] <- current
}
}
}
}
#dist is a vector of the shortest distance from the init node to each node
#ie dist[i] is the shortest distance from the initial node to node i
return(list(dist = dist))
}
wiki_graph <-
data.frame(v1 = c(1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6),
v2 = c(2, 3, 6, 1, 3, 4, 1, 2, 4, 6, 2, 3, 5, 4, 6, 1, 3, 5),
w = c(7, 9, 14, 7, 10, 15, 9, 10, 11, 2, 15, 11, 6, 6, 9, 14, 2, 9))
print(dijkstra(wiki_graph, 1))
ls
devtools::use_testthat()
devtools::use_testthat()
usethis::use_testthat()
setwd("~/GitHub/Rprog---github/simgehugo732A94lab3")
usethis::use_testthat()
devtools::uses_testthat()
euclidian(-100, 1000)
# The euclidean algorithm
euclidean <- function(input1, input2){
# Asserting that inputs are numeric scalars
stopifnot(
is.numeric(input1), is.vector(input1), length(input1) == 1, input1 > 0,
is.numeric(input2), is.vector(input2), length(input2) == 1, input2 > 0
)
min_inp <- min(input1, input2) #the max from the input
max_inp <- max(input1, input2) #the min from the input
remainder <- max_inp %% min_inp #initial remainder
# repeat the proc
repeat{
if (remainder != 0){
max_inp <- min_inp
min_inp <- remainder
remainder <- max_inp %% min_inp
} else{
return(min_inp)
break
}
}
}
euclidian(-100, 1000)
euclidean(-100, 1000)
#' Dijkstra's Algorithm
#'
#' @param graph a data frame with columns v1 (from), v2 (to), w (weight)
#' @param init.node the starting node
#' @return the shortest path from init.node to all other nodes
#' @export
#' @examples
#' wiki_graph <- data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
#'                          v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
#'                    w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
#' dijkstra(wiki_graph, 1)
dijkstra <- function(graph, init_node) {
#pseudo code source = https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm
#Checking input
stopifnot(c(v1, v2, w) %in% graph)
if (nrow(graph) == 0) {
stop("The graph is empty")
}
if (!(init_node %in% graph$v1)){
stop("The initial node is not in the graph")
}
dist <- c()
prev <- c()
unvisited <- c()
num_uniq <- length(unique(graph$v1))
#initialize distance to infinity
for (i in 1:num_uniq){
dist[i] <- Inf
unvisited[i] <- i
}
#Set the distance to zero for the initial node
dist[init_node] <- 0
#Set the current node to the initial node
current <- init_node
while(length(unvisited) > 0) {
#print("while loop")
#find the node in the queue with the smallest dist
min_dist <- Inf
for (i in 1:length(unvisited)){
if (dist[unvisited[i]] < min_dist) {
min_dist <- dist[unvisited[i]]
current <- unvisited[i]
}
}
#remove current from Q
unvisited <- unvisited[unvisited != current]
#for each neighbor of current
for (i in 1:nrow(graph)) {
if (graph[i, 1] == current) {
neighbor <- graph[i, 2]
alt <- dist[current] + graph[i, 3] #weight to the the current node + weight of new path
if (alt < dist[neighbor]) {
dist[neighbor] <- alt #update the new distance
}
}
}
}
#dist is a vector of the shortest distance from the init node to each node
#ie dist[i] is the shortest distance from the initial node to node i
return(dist)
}
library(simgehugo732A94lab3)
library(simgehugo732A94lab3)
library(euclidean)
library(Rprog--github)
library(Rprog---github)
library(simgehugo732A94lab3)
?dijkstra
?euclidean
?dijkstra
install.packages("roxygen2")
library(simgehugo732A94lab3)
usethis::use_github_action_check_standard()
usethis::use_github_action()
package(devtools)
?devtools
??devtools
usethis::use_github_action("check-release")
?version
R.Version()
usethis::use_github_action()
library(simgehugo732A94lab3)
?dijkstra
library(simgehugo732A94lab3)
?dijkstra
library(simgehugo732A94lab3)
?dijkstra
library(simgehugo732A94lab3)
library(simgehugo732A94lab3)
?dijkstra
library(simgehugo732A94lab3)
?dijkstra
library(simgehugo732A94lab3)
?dijkstra
library(simgehugo732A94lab3)
library(simgehugo732A94lab3)
?dijkstra
library(simgehugo732A94lab3)
?dijkstra
?dijkstra
library(simgehugo732A94lab3)
?dijkstra
library(simgehugo732A94lab3)
library(simgehugo732A94lab3)
?dijkstra
?euclidian
?euclidean
library(simgehugo732A94lab3)
?euclidean
?euclidean
library(simgehugo732A94lab3)
library(simgehugo732A94lab3)
?euclidean
library(simgehugo732A94lab3)
?euclidean
library(simgehugo732A94lab3)
?euclidean
library(simgehugo732A94lab3)
library(simgehugo732A94lab3)
?euclidean
library(simgehugo732A94lab3)
?euclidean
?euclidean
?dijkstra
usethis::use_github_action_check_standard()
use_github_action()
usethis::use_github_action()
